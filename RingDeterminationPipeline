package org.openftc.easyopencv.examples.tensoflow;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.openftc.easyopencv.OpenCvPipeline;

public class RingDeterminationPipeline extends OpenCvPipeline{
    public enum RingPosition
    {
        FOUR,
        ONE,
        NONE,
    }

    private static final Scalar BLUE = new Scalar(0, 0, 255);
    private static final Scalar GREEN = new Scalar(0, 255, 0);

    private static final Point REGION_TOPLEFT_AWCHOR_POINT = new Point(181, 98); // need to change

    private static final int RENGIN_WIDTH = 35;
    private static final int REGION_HEIGHT = 25;

    private final int FOUR_RING_THRESHOLD = 150;
    private final int ONE_RING_THRESHOLD = 135;

    private Point region_pointA = new Point(
            REGION_TOPLEFT_AWCHOR_POINT.x,
            REGION_TOPLEFT_AWCHOR_POINT.y);

    private Point region_pointB = new Point(
            REGION_TOPLEFT_AWCHOR_POINT.x + RENGIN_WIDTH,
            REGION_TOPLEFT_AWCHOR_POINT.y + REGION_HEIGHT);

    private Mat region_CB;
    private Mat YCrCB = new Mat();
    private Mat CB = new Mat();
    private int avgi;

    volatile RingPosition position = RingPosition.FOUR;

    private void inputToCb (Mat input){
        Imgproc.cvtColor(input, YCrCB, Imgproc.COLOR_RGB2YCrCb);
    }

    @Override
    public void init (Mat firsFrame){
        inputToCb(firsFrame);

        region_CB = CB.submat(new Rect(region_pointA, region_pointB));
    }

    @Override
    public Mat processFrame (Mat input){
        inputToCb(input);

        avgi = (int) Core.mean(region_CB).val[0];

        Imgproc.rectangle(
                input,
                region_pointA,
                region_pointB,
                BLUE,
                -1);

        position = RingPosition.FOUR;
        if (avgi > FOUR_RING_THRESHOLD){
            position = RingPosition.FOUR;
        }
        else if (avgi > ONE_RING_THRESHOLD){
            position = RingPosition.ONE;
        }
        else {
            position = RingPosition.NONE;
        }

        Imgproc.rectangle(
                input,
                region_pointA,
                region_pointB,
                GREEN,
                -1);

        return input;
    }

    public int getAnalysis(){
        return avgi;
    }
}
