package org.openftc.easyopencv.examples.tensoflow;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;

import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvInternalCamera;

import static org.openftc.easyopencv.examples.tensoflow.RingDeterminationPipeline.*;


public class tensoflow extends OpMode {
    private OpenCvInternalCamera phoneCam;
    private RingDeterminationPipeline pipeline;
    RingPosition ring;

    public void init(){
        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        phoneCam = OpenCvCameraFactory.getInstance().createInternalCamera(OpenCvInternalCamera.CameraDirection.BACK, cameraMonitorViewId);
        pipeline = new RingDeterminationPipeline();
        phoneCam.setPipeline(pipeline);

        ring = pipeline.position;

        phoneCam.setViewportRenderingPolicy(OpenCvCamera.ViewportRenderingPolicy.OPTIMIZE_VIEW);

        phoneCam.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()
        {
            @Override
            public void onOpened()
            {
                phoneCam.startStreaming(320,240, OpenCvCameraRotation.SIDEWAYS_LEFT);
            }
        });
    }

    public void init_loop(){
        telemetry.addData("Analysis", pipeline.getAnalysis());
        telemetry.addData("position", pipeline.position);
        telemetry.update();

        if (ring  == RingPosition.FOUR){
            // there are four rings
        }
        else if (ring == RingPosition.ONE){
            // there is one ring
        }
        else {
            // there is no ring
        }
    }

    public void start(){

    }
    public void loop(){

    }

}

